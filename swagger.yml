openapi: 3.0.1
info:
  title: User Service API
  description: Users from GoOutSafe with Microservices
  version: "0.1"
servers:
- url: /
paths:
  /user/create_user:
    post:
      tags:
        - User
      summary: Create a new customer for the application.
      operationId: app.create_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: "The operation is gone"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        404:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        412:
          description: "user already exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        500:
          description: "The code returned if there is some error on server, e.g: user already exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/create_operator:
    post:
      tags:
        - User
      summary: Create a new operator for the application to managed a new restaurants.
      operationId: app.create_operator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        404:
          description: "user not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        412:
          description: "user already exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        500:
          description: "The code returned if there is some error on server, e.g: user already exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/user_by_email:
        post:
            tags:
              - User
            summary: Make a check if the user is inside the server. Perform the research by email.
            operationId: app.user_is_present_by_email
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/UserCheckByEmail'
            responses:
              200:
                description: "The operation is done"
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UserWithRole'
              404:
                description: "user not found"
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Result'
              412:
                description: "user already exist"
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Result'
              500:
                description: "The code returned if there is some error on server, e.g: user already exist"
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Result'
  /user/user_by_phone:
    post:
      tags:
        - User
      summary: Make a check if the user is inside the server. Perform the research by phone.
      operationId: app.user_is_present_by_phone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCheckByPhone'
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithRole'
        404:
          description: "user not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        412:
          description: "user already exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        500:
          description: "The code returned if there is some error on server, e.g: user already exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/login:
    post:
      tags:
        - User
      summary: From email and password it does the login and return the user data.
      operationId: app.login_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogIn'
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithRole'
        404:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        500:
          description: "The code returned if there is some error on server, e.g: user already exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/email:
    post:
      tags:
        - User
      summary: Get the user by email
      operationId: app.get_user_by_email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCheckByEmail'
      responses:
        200:
          description: "User is returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithRole'
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/data/:
    put:
      tags:
        - User
      summary: Update the user data.
      operationId: app.modify_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModify'
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithRole'
        404:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/delete/{id}:
    delete:
      tags:
        - User
      summary: Update the user data.
      operationId: app.delete_user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The user ID
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        500:
          description: "The code returned if there is some error on server"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/role/{role_id}:
    get:
      tags:
        - User
      summary: Get the value associated to the role_id
      operationId: app.get_role_by_id
      parameters:
        - in: path
          name: role_id
          schema:
            type: integer
          required: true
          description: The role ID
      responses:
        200:
          description: "Role is returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          description: "Role not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/{id}:
    get:
      tags:
        - User
      summary: get the user with the ID
      operationId: app.get_user_by_id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        200:
          description: "User is returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithRole'
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/unmark:
    put:
      tags:
        - Positive
      summary: Unmark a positive customer
      operationId: app.unmark_a_positive_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unmark'
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        400:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        404:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/checkpositive/{key}/{value}:
    get:
      tags:
        - Positive
      summary: check if a customer is positive
      operationId: app.check_user_is_positive
      parameters:
        - in: path
          name: key
          schema:
            type: string
          required: true
          description: phone or email
        - in: path
          name: value
          schema:
            type: string
          required: true
          description: value of phone or email
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        400:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        404:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
  /user/positiveinfo/{key}/{value}:
    get:
      tags:
        - Positive
      summary: check if a customer is positive
      operationId: app.get_positive_info
      parameters:
        - in: path
          name: key
          schema:
            type: string
          required: true
          description: phone or email
        - in: path
          name: value
          schema:
            type: string
          required: true
          description: value of phone or email
      responses:
        200:
          description: "The operation is done"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Positive'
        400:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        404:
          description: "Resource don't found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
components:
  schemas:
    User:
      required:
      - email
      - firstname
      - lastname
      - password
      - phone
      - dateofbirth
      type: object
      properties:
        email:
          maxLength: 100
          minLength: 1
          type: string
          description: User email
          example: "adriano@gmail.com"
        firstname:
          maxLength: 100
          minLength: 1
          type: string
          description: User name
          example: "Adriano"
        lastname:
          maxLength: 100
          minLength: 1
          type: string
          description: User name
          example: "Galiani"
        password:
          type: string
          format: password
          minLength: 5
          maxLength: 50
          description: Password of the new user
          example: "*********"
        phone:
          type: string
          minLength: 5
          maxLength: 50
          description: Restaurant Phone Number
          example: "050123456"
        dateofbirth:
          type: string
          format: date
          example: "2017-07-21"
    UserWithRole:
      required:
        - email
        - firstname
        - lastname
        - password
        - phone
        - dateofbirth
        - role
        - id
        - is_positive
      type: object
      properties:
        email:
          maxLength: 100
          minLength: 1
          type: string
          description: User email
          example: "adriano@gmail.com"
        firstname:
          maxLength: 100
          minLength: 1
          type: string
          description: User name
          example: "Adriano"
        lastname:
          maxLength: 100
          minLength: 1
          type: string
          description: User name
          example: "Galiani"
        password:
          type: string
          format: password
          minLength: 5
          maxLength: 50
          description: Password of the new user
          example: "*********"
        phone:
          type: string
          minLength: 5
          maxLength: 50
          description: Restaurant Phone Number
          example: "050123456"
        dateofbirth:
          type: string
          format: date
          example: "2017-07-21"
        role:
          type: integer
          example: 2
        id:
          type: integer
          example: 3
        is_positive:
          type: boolean
          example: false
    Result:
      required:
        - result
      type: object
      properties:
        result:
          type: string
          default: Type of result
          example: "Message to describe what happen on server"
    LogIn:
      required:
        - email
        - password
      type: object
      properties:
        email:
          maxLength: 100
          minLength: 1
          type: string
          description: User email
          example: "adriano@gmail.com"
        password:
          type: string
          format: password
          minLength: 5
          maxLength: 50
          description: Password of the new user
          example: "*********"
    Role:
      required:
        - id
        - value
        - label
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        value:
          maxLength: 100
          minLength: 1
          type: string
          description: Role value
          example: "ADMIN"
        label:
          maxLength: 100
          minLength: 1
          type: string
          description: Role label
          example: "admin role"
    UserCheckByEmail:
      required:
        - email
      type: object
      properties:
          email:
            maxLength: 100
            minLength: 1
            type: string
            description: User email
            example: "adriano@gmail.com"
    UserCheckByPhone:
      required:
        - phone
      type: object
      properties:
        phone:
              type: string
              minLength: 5
              maxLength: 50
              description: Phone number of user
              example: "480343234"
    UserModify:
        required:
          - email
          - firstname
          - lastname
          - phone
          - dateofbirth
          - role
          - id
        type: object
        properties:
          email:
            maxLength: 100
            minLength: 1
            type: string
            description: User email
            example: "adriano@gmail.com"
          firstname:
            maxLength: 100
            minLength: 1
            type: string
            description: User name
            example: "Adriano"
          lastname:
            maxLength: 100
            minLength: 1
            type: string
            description: User name
            example: "Galiani"
          phone:
            type: string
            minLength: 5
            maxLength: 50
            description: Restaurant Phone Number
            example: "050123456"
          dateofbirth:
            type: string
            format: date
            example: "2017-07-21"
          role:
            type: integer
            example: 2
          id:
            type: integer
            example: 3
    Unmark:
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
          minLength: 5
          maxLength: 5
          description: "phone or email"
          example: "email"
        value:
          type: string
          minLength: 1
          maxLength: 128
          description: Phone or email
          example: "example@email.com"
    Positive:
      required:
        - id
        - from_date
        - marked
        - user_id
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          description: id of the user
          example: 4
        from_date:
          type: string
          format: date
          description: date of marked as positive
          example: "YYYY-MM-DD"
        marked:
          type: boolean
          description: "true if customer is positive, false otherwise"
          example: true
        user_id:
          type: integer
          minimum: 1
          description: id of the user
          example: 3


  